{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js","images/IMG_2130.JPG"],"names":["module","exports","__webpack_require__","p","App","_useState","useState","text","key","_useState2","Object","slicedToArray","items","transitions","useTransition","item","from","transform","opacity","enter","leave","react_default","a","createElement","className","style","backgroundImage","concat","image","width","height","padding","marginTop","borderRadius","display","flexDirection","map","_ref","props","web","justifyContent","alignItems","react_social_icons","url","network","bgColor","fgColor","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6LC8CzBC,MAvCf,WAAe,IAAAC,EAEUC,mBAAS,CAAC,CAACC,KAAM,gBAAiBC,IAAK,KAFjDC,EAAAC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,GAEJO,EAFIH,EAAA,GAGLI,GAHKJ,EAAA,GAGSK,YAAcF,EAAO,SAAAG,GAAI,OAAIA,EAAKP,KAAK,CACvDQ,KAAM,CAAEC,UAAW,yBAA0BC,QAAS,GACtDC,MAAO,CAAEF,UAAW,uBAAwBC,QAAS,GACrDE,MAAO,CAAEH,UAAW,yBAA0BC,QAAS,MAE3D,OAEIG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,MAAO,CAACC,gBAAe,OAAAC,OAASC,IAAT,KAAmBC,MAAO,OAAQC,OAAQ,SAClFT,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACdH,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAEM,QAAS,GAAIC,UAAW,GAAIC,aAAc,KACpDZ,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACS,QAAS,OAAQC,cAAe,QAGzCtB,EAAYuB,IAAI,SAAAC,GAAA,IAAGtB,EAAHsB,EAAGtB,KAAMuB,EAATD,EAASC,MAAO9B,EAAhB6B,EAAgB7B,IAAhB,OACZa,EAAAC,EAAAC,cAACgB,EAAA,EAASpC,EAAV,CAAaqB,UAAU,YAAYhB,IAAKA,EAAKiB,MAAOa,GAAQ,IAAMvB,EAAKR,KAAO,QAKtFc,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACe,eAAgB,SAAUC,WAAY,WAAYP,QAAS,SAEpEb,EAAAC,EAAAC,cAACmB,EAAA,WAAD,CAAYC,IAAI,mCAAmCC,QAAS,SAAUC,QAAS,cAAeC,QAAS,UACvGzB,EAAAC,EAAAC,cAACmB,EAAA,WAAD,CAAYC,IAAI,uCAAuCE,QAAS,cAAeC,QAAS,UACxFzB,EAAAC,EAAAC,cAACmB,EAAA,WAAD,CAAYC,IAAI,+BAA+BC,QAAS,QAASC,QAAS,cAAeC,QAAS,eCrBtGC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInB9D,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.add2da69.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport image from \"./images/IMG_2130.JPG\"\nimport { SocialIcon } from 'react-social-icons';\nimport {useTransition, animated} from 'react-spring';\n\nfunction App() {\n\n    const [items, set] = useState([{text: \"David Vittori\", key: 1}])\n    const transitions = useTransition(items, item => item.key, {\n        from: { transform: 'translate3d(0,-40px,0)', opacity: 0 },\n        enter: { transform: 'translate3d(0,0px,0)', opacity: 1 },\n        leave: { transform: 'translate3d(0,-40px,0)', opacity: 0 },\n    })\n    return (\n\n        <div className=\"App\" style={{backgroundImage: `url(${image})`, width: \"100%\", height: \"100%\"}}>\n            <header className=\"App-header\">\n                <div style={{ padding: 20, marginTop: 30, borderRadius: 10}}>\n                    <div style={{display: \"flex\", flexDirection: \"row\"}}>\n\n                    {\n                        transitions.map(({ item, props, key }) =>\n                            <animated.p  className=\"App-Title\" key={key} style={props}>{\" \" + item.text + \" \"}</animated.p>\n                        )\n                    }\n                    </div>\n\n                    <div style={{justifyContent: \"center\", alignItems: \"flex-end\", display: \"flex\"}}>\n\n                        <SocialIcon url=\"https://github.com/VittoriDavide\" network={\"github\"} bgColor={\"transparent\"} fgColor={\"black\"}/>\n                        <SocialIcon url=\"https://www.linkedin.com/in/vittori/\" bgColor={\"transparent\"} fgColor={\"black\"}/>\n                        <SocialIcon url=\"mailto:dvd.vittori@gmail.com\" network={\"email\"} bgColor={\"transparent\"} fgColor={\"black\"}/>\n\n                    </div>\n\n                </div>\n\n            </header>\n\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/IMG_2130.43f24723.JPG\";"],"sourceRoot":""}